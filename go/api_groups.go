/*
 * Opal Custom App Connector API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
	authentik "goauthentik.io/api/v3"
)

type GroupsAPI struct {
}

// Post /groups/:group_id/resources
func (api *GroupsAPI) AddGroupResource(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /groups/:group_id/users
func (api *GroupsAPI) AddGroupUser(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /groups/:group_id
func (api *GroupsAPI) GetGroup(c *gin.Context) {
	groupID := c.Param("group_id")

	authentik, err := NewAuthentikClient()
	if err != nil {
		c.JSON(500, buildRespFromErr(err))
		return
	}

	authentikGroup, err := authentik.GetGroup(c, groupID)
	if err != nil {
		c.JSON(500, buildRespFromErr(err))
		return
	}
	opalGroup := toOpalGroup(authentikGroup)

	// Your handler implementation
	c.JSON(200, gin.H{"group": *opalGroup})
}

// Get /groups/:group_id/resources
func (api *GroupsAPI) GetGroupResources(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /groups/:group_id/users
func (api *GroupsAPI) GetGroupUsers(c *gin.Context) {
	groupID := c.Param("group_id")

	authentik, err := NewAuthentikClient()
	if err != nil {
		c.JSON(500, buildRespFromErr(err))
		return
	}

	groupMemberships, err := authentik.GetGroupUsers(c, groupID)
	if err != nil {
		c.JSON(500, buildRespFromErr(err))
		return
	}

	groupUsers := make([]GroupUser, 0)
	for _, groupMembership := range groupMemberships {
		groupUsers = append(groupUsers, GroupUser{
			UserId: groupMembership.GetUid(),
			Email:  groupMembership.GetEmail(),
		})
	}

	// Next cursor being "" tells Opal this is the last page. Since GroupUsers are not paginated in Authentik we use this
	nextCursor := ""
	c.JSON(200, GroupUsersResponse{
		NextCursor: &nextCursor,
		Users:      groupUsers,
	})
}

// Get /groups
func (api *GroupsAPI) GetGroups(c *gin.Context) {
	authentik, err := NewAuthentikClient()
	if err != nil {
		c.JSON(500, buildRespFromErr(err))
		return
	}

	authentikGroups, nextCursor, err := authentik.PaginatedListGroups(c)
	if err != nil {
		c.JSON(500, buildRespFromErr(err))
		return
	}

	groups := make([]Group, 0)
	for _, authentikGroup := range authentikGroups {
		group := toOpalGroup(&authentikGroup)
		groups = append(groups, *group)
	}

	c.JSON(200, GroupsResponse{
		Groups:     groups,
		NextCursor: &nextCursor,
	})
}

// Delete /groups/:group_id/resources/:resource_id
func (api *GroupsAPI) RemoveGroupResource(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /groups/:group_id/users/:user_id
func (api *GroupsAPI) RemoveGroupUser(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

func toOpalGroup(group *authentik.Group) *Group {
	return &Group{
		Id:   group.GetPk(),
		Name: group.GetName(),
		// Description is not available for authentik groups
	}
}
